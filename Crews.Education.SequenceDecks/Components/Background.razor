@using Crews.Education.SequenceDecks.Extensions
@inject IAerialService AerialService
@inject IJSRuntime JSRuntime
@inject AppStateService AppState
@implements IAsyncDisposable

<div class="background-container">
    <video @ref="primaryVideoElement" class="background-video" muted src="@primarySource" preload="auto" />
    <video @ref="secondaryVideoElement" class="background-video @(isPrimaryVideoActive ? "hidden" : "")" muted
        src="@secondarySource" preload="auto" />
    @if (started)
    {
        <div class="caption-container">
            @if (!string.IsNullOrWhiteSpace(caption))
            {
                <p>@caption</p>
            }
            @if (awaitingSkip)
            {
                <div style="padding: 8px">
                    <Spinner Size="24" Color="white" />
                </div>
            }
            else
            {
                <div class="skip-button" @onclick="HandleSkipRequest">
                    <p>Skip</p>
                </div>
            }
        </div>
    }
    else
    {
        <div class="gradient-bg @(started ? "hidden" : "")" />
    }
</div>

@code {
    private bool started = false;
    private bool firstVideo = true;

    private int aerialIndex = 0;
    private List<Aerial> aerials = [];

    private bool isPrimaryVideoActive = true;
    private ElementReference primaryVideoElement;
    private ElementReference secondaryVideoElement;
    private IJSObjectReference? _jsModule;
    private DotNetObjectReference<Background>? _objRef;

    private string primarySource = "";
    private string secondarySource = "";

    private string caption = "";
    private int nextCaptionTime = 0;

    private NextVideoLoadState nextVideoLoadState = NextVideoLoadState.NotStarted;
    private bool transitioning = false;
    private bool awaitingSkip = false;

    protected override void OnInitialized() => AppState.OnChange += StateHasChanged;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            nextVideoLoadState = NextVideoLoadState.Loading;

            _objRef = DotNetObjectReference.Create(this);
            _jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/videoInterop.js");

            var groups = await AerialService.GetAerialGroupsAsync();
            aerials = groups?.SelectMany(group => group.Videos).Shuffle().ToList() ?? [];

            await _jsModule.InvokeVoidAsync("registerCanPlayThrough", primaryVideoElement, _objRef);
            await _jsModule.InvokeVoidAsync("registerTimeUpdate", primaryVideoElement, _objRef);

            primarySource = GetUri(aerials[0])?.OriginalString ?? "";
            await InvokeAsync(() => StateHasChanged());
        }

        if (!started && AppState.Started)
        {
            started = true;
            await PlayVideoAsync();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    [JSInvokable]
    public async Task OnTimeUpdateAsync(double currentTimeInSeconds, double durationInSeconds)
    {
        double timeRemaining = durationInSeconds - currentTimeInSeconds;
        caption = GetCaption(currentTimeInSeconds) ?? "No info";

        if (currentTimeInSeconds > nextCaptionTime)
        {
            nextCaptionTime = aerials[aerialIndex].Captions
            .OrderBy(caption => caption.Seconds)
            .FirstOrDefault(caption => caption.Seconds > currentTimeInSeconds)?
            .Seconds ?? 0;
        }

        if ((timeRemaining < 5 || (awaitingSkip && nextVideoLoadState == NextVideoLoadState.CanPlayThrough)) && !transitioning)
        {
            await ChangeVideoAsync();
        }
        else if (timeRemaining > 5 && currentTimeInSeconds > 5)
        {
            if (transitioning)
            {
                transitioning = false;
            }
            if (nextVideoLoadState == NextVideoLoadState.NotStarted)
            {
                await LoadNextVideoAsync();
            }
        }

        await InvokeAsync(() => StateHasChanged());
    }

    [JSInvokable]
    public void OnNextVideoCanPlayThrough()
    {
        nextVideoLoadState = NextVideoLoadState.CanPlayThrough;
        if (firstVideo)
        {
            firstVideo = false;
            nextVideoLoadState = NextVideoLoadState.NotStarted;
            AppState.BackgroundReady = true;
        }
    }

    public Task StartBackgroundAsync() => PlayVideoAsync();

    public async ValueTask DisposeAsync()
    {
        if (_jsModule != null)
        {
            await _jsModule.InvokeVoidAsync("unregisterTimeUpdate", primaryVideoElement);
            await _jsModule.InvokeVoidAsync("unregisterTimeUpdate", secondaryVideoElement);
            await _jsModule.DisposeAsync();
        }

        AppState.OnChange -= StateHasChanged;
        _objRef?.Dispose();
    }

    private async Task PlayVideoAsync()
    {
        if (!started)
        {
            started = true;
        }
        if (_jsModule != null)
        {
            await _jsModule.InvokeVoidAsync("playVideo", ActiveVideoElement());
        }
    }

    private async Task ChangeVideoAsync()
    {
        transitioning = true;
        awaitingSkip = false;

        nextVideoLoadState = NextVideoLoadState.NotStarted;
        await ToggleActiveVideoAsync();
        aerialIndex++;
        if (aerialIndex >= aerials.Count)
        {
            aerialIndex = 0;
        }
        nextCaptionTime = 0;
        await PlayVideoAsync();
    }

    private static Uri? GetUri(Aerial aerial, Aerial.Resolution resolution = Aerial.Resolution.HD)
    => aerial.Variants.FirstOrDefault(variant => variant.Resolution == resolution)?.Uri;

    private string GetCaption(double currentTime) => aerials[aerialIndex].Captions
    .OrderBy(caption => caption.Seconds)
    .LastOrDefault(caption => caption.Seconds < currentTime)?.Text
    ?? aerials[aerialIndex].Captions
    .OrderBy(caption => caption.Seconds)
    .FirstOrDefault()?
    .Text ?? "No Info";

    private ElementReference ActiveVideoElement() => isPrimaryVideoActive ? primaryVideoElement : secondaryVideoElement;
    private ElementReference InactiveVideoElement() => isPrimaryVideoActive ? secondaryVideoElement : primaryVideoElement;

    private async Task ToggleActiveVideoAsync()
    {
        isPrimaryVideoActive = !isPrimaryVideoActive;

        if (_jsModule != null)
        {
            await _jsModule.InvokeVoidAsync("registerTimeUpdate", ActiveVideoElement(), _objRef);
            await _jsModule.InvokeVoidAsync("unregisterTimeUpdate", InactiveVideoElement());
        }
    }

    private async Task LoadNextVideoAsync(int? customCurrentIndex = null)
    {
        nextVideoLoadState = NextVideoLoadState.Loading;

        Aerial nextAerial = aerials[(customCurrentIndex ?? aerialIndex) + 1];
        if (ActiveVideoElement().Equals(primaryVideoElement))
        {
            secondarySource = GetUri(nextAerial)?.OriginalString ?? "";
        }
        else
        {
            primarySource = GetUri(nextAerial)?.OriginalString ?? "";
        }

        if (_jsModule != null)
        {
            await _jsModule.InvokeVoidAsync("registerCanPlayThrough", InactiveVideoElement(), _objRef);
        }
    }

    private void HandleSkipRequest() => awaitingSkip = true;

    private enum NextVideoLoadState
    {
        NotStarted,
        Loading,
        CanPlayThrough
    }
}