@using Crews.Education.SequenceDecks.Models
@using Microsoft.AspNetCore.WebUtilities
@inject IDeckService DeckService
@inject AppStateService AppState
@inject NavigationManager Navigation
@implements IDisposable

<div class="center-content">
    @if (availableDecks is not null)
    {
        <div class="deck-grid">
            @foreach (var deck in availableDecks)
            {
                <div class="deck-button-container">
                    <button class="deck-button @(IsDeckSelected(deck.Slug) ? "selected" : "")" 
                            style="color:@deck.Color" 
                            @onclick="() => ToggleDeck(deck.Slug)">
                        <div class="card-stack">
                            <div class="card card-back"></div>
                            <div class="card card-middle"></div>
                            <div class="card card-front">
                                @deck.Name
                            </div>
                        </div>
                        @if (IsDeckSelected(deck.Slug))
                        {
                            <div class="checkbox-indicator">âœ“</div>
                        }
                    </button>
                </div>
            }
        </div>
        <div class="button-container">
            <IconButton IconName="@(shuffle ? "check_box" : "check_box_outline_blank")" OnClick="ToggleShuffle">
                Shuffle
            </IconButton>
            <IconButton IconName="play_circle" OnClick="PresentCards">
                Start (@(deckSelectionText))
            </IconButton>
        </div>
    }
    else
    {
        <Spinner Size="32" Color="white" />
        <h2>Loading...</h2>
    }
</div>

@code {
    private IEnumerable<Deck>? availableDecks;
    private HashSet<string> selectedDecks = [];
    private bool shuffle = false;

    private string deckSelectionText => selectedDecks.Count == 0 || selectedDecks.Count == availableDecks?.Count() 
        ? "all decks" 
        : $"{selectedDecks.Count} deck{(selectedDecks.Count == 1 ? "" : "s")}";

    protected override async Task OnInitializedAsync()
    {
        AppState.OnChange += StateHasChanged;
        Navigation.LocationChanged += OnLocationChanged;
        availableDecks = await DeckService.GetDecksAsync();
        LoadSelectionFromUrl();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        LoadSelectionFromUrl();
        StateHasChanged();
    }

    private void LoadSelectionFromUrl()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var queryParams = QueryHelpers.ParseQuery(uri.Query);

        if (queryParams.TryGetValue("decks", out var deckParams) && !string.IsNullOrEmpty(deckParams))
        {
            var selectedDeckSlugs = deckParams.ToString().Split(',', StringSplitOptions.RemoveEmptyEntries)
                .Select(slug => slug.Trim())
                .Where(slug => !string.IsNullOrEmpty(slug))
                .ToHashSet();

            foreach (var slug in selectedDeckSlugs)
            {
                ToggleDeck(slug);
            }
        }
    }

    public void Dispose() 
    {
        AppState.OnChange -= StateHasChanged;
        Navigation.LocationChanged -= OnLocationChanged;
    }

    private void ToggleDeck(string slug)
    {
        if (!selectedDecks.Remove(slug)) selectedDecks.Add(slug);
    }

    private bool IsDeckSelected(string slug) => selectedDecks.Contains(slug);

    private void PresentCards()
    {
        if (availableDecks is null) return;

        if (selectedDecks.Count == 0 || selectedDecks.Count == availableDecks.Count())
        {
            selectedDecks.Clear();
            selectedDecks.Add("all");
        }

        var queryString = string.Join(",", selectedDecks);
        var url = $"?decks={Uri.EscapeDataString(queryString)}{(shuffle ? "&shuffle=true" : "")}";
        Navigation.NavigateTo(url);
        AppState.StartBackground();
    }

    private void ToggleShuffle() => shuffle = !shuffle;
}
