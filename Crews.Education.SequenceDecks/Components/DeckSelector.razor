@using Crews.Education.SequenceDecks.Models
@using Microsoft.AspNetCore.WebUtilities
@inject IDeckService DeckService
@inject AppStateService AppState
@inject NavigationManager Navigation
@implements IDisposable

@if (!AppState.Started)
{
    <div class="center-content">
        @if (AppState.BackgroundReady && decks is not null)
        {
            <div class="deck-grid">
                @foreach (var deck in decks)
                {
                    <div class="deck-button-container">
                        <button class="deck-button @(AppState.IsDeckSelected(deck.Slug) ? "selected" : "")" 
                                style="color:@deck.Color" 
                                @onclick="() => ToggleDeck(deck.Slug)">
                            <div class="card-stack">
                                <div class="card card-back"></div>
                                <div class="card card-middle"></div>
                                <div class="card card-front">
                                    @deck.Name
                                </div>
                            </div>
                            @if (AppState.IsDeckSelected(deck.Slug))
                            {
                                <div class="checkbox-indicator">âœ“</div>
                            }
                        </button>
                    </div>
                }
            </div>
            <div class="start-button-container">
                <button class="start-button" 
                        disabled="@(!AppState.HasSelectedDecks)"
                        @onclick="StartGame">
                    Start (@AppState.SelectedDeckSlugs.Count deck@(AppState.SelectedDeckSlugs.Count == 1 ? "" : "s"))
                </button>
            </div>
        }
        else
        {
            <Spinner Size="32" Color="white" />
            <h2>Loading...</h2>
        }
    </div>
}

@code {

    private IEnumerable<Deck>? decks;

    protected override async Task OnInitializedAsync()
    {
        AppState.OnChange += StateHasChanged;
        Navigation.LocationChanged += OnLocationChanged;
        decks = await DeckService.GetDecksAsync();
        LoadSelectionFromUrl();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        LoadSelectionFromUrl();
        StateHasChanged();
    }

    private void LoadSelectionFromUrl()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var queryParams = QueryHelpers.ParseQuery(uri.Query);
        
        if (queryParams.TryGetValue("decks", out var deckParams) && !string.IsNullOrEmpty(deckParams))
        {
            var selectedDeckSlugs = deckParams.ToString().Split(',', StringSplitOptions.RemoveEmptyEntries)
                .Select(slug => slug.Trim())
                .Where(slug => !string.IsNullOrEmpty(slug))
                .ToHashSet();

            AppState.ClearSelection();
            foreach (var slug in selectedDeckSlugs)
            {
                AppState.ToggleDeckSelection(slug);
            }
        }
    }

    public void Dispose() 
    {
        AppState.OnChange -= StateHasChanged;
        Navigation.LocationChanged -= OnLocationChanged;
    }

    private void ToggleDeck(string slug)
    {
        AppState.ToggleDeckSelection(slug);
    }

    private void StartGame()
    {
        if (AppState.HasSelectedDecks)
        {
            var selectedDecks = string.Join(",", AppState.SelectedDeckSlugs);
            var url = $"?decks={Uri.EscapeDataString(selectedDecks)}";
            Navigation.NavigateTo(url);
            AppState.Started = true;
        }
    }
}
